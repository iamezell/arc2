<html>
  <head>
  </head>
  <body>
  <button id="streamerStartBtn">Start stream</button>
  <button id="streamerStopBtn">Stop stream</button>
  <button id="playerStartBtn">Play stream</button>
  <button id="playerStopBtn">Stop stream</button>
  <script type="module">
    let streamerStartBtn = document.getElementById("streamerStartBtn")
      streamerStartBtn.addEventListener("click", ()=>{
        touchStarted()
      }, this)

      
      const touchStarted = async ()=> {
        const AudioContext = new window.AudioContext() || window.webkitAudioContext
       
       try {
          await AudioContext.audioWorklet.addModule("js/audio-processor.js")
          let stream = null
          let devices = null
          AudioContext.resume();
         try {
          devices = await navigator.mediaDevices.enumerateDevices()
          devices = devices.filter((d) => d.kind === 'audioinput');
          try{
            stream = await navigator.mediaDevices.getUserMedia({ audio: {deviceId:devices[0].deviceId}, video:false })
          let microphone = AudioContext.createMediaStreamSource(stream);
          let oggEncoder = new AudioWorkletNode(AudioContext, 'audio-processor');
          microphone.connect(oggEncoder).connect(AudioContext.destination);
          }catch(err) {
        console.log("there was an error", err)
          }
         }catch(error) {
          console.log("there was an error getting mic", error)
         }
         
       }catch(err) {
        AudioContext.suspend();
        console.log("audio context was suspended")
        console.log("there was an error", err)
       }
        //  navigator.mediaDevices.getUserMedia({ audio: true }, stream => {
        //    let microphone = AudioContext.createMediaStreamSource(stream);
        //    let oggEncoder = new AudioWorkletNode(context, 'ogg');
           
        //    microphone.connect(oggEncoder).connect(AudioContext.destination);
        //  });
        }
    // const demoCode = async (context) => {
    //   await context.audioWorklet.addModule('bypass-processor.js');
    //   const oscillator = new OscillatorNode(context);
    //   const bypasser = new AudioWorkletNode(context, 'bypass-processor');
    //   oscillator.connect(bypasser).connect(context.destination);
    //   oscillator.start();
    // };
  </script>
  </body>
</html>