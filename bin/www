#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('arc2:server');
var http = require('http');
var world = require('../src/server/world')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var players = []

io.on('connection', function(client) {  
  console.log('Client connected...');
  const id = client.id
  const myWorld = new world()
  myWorld.addPlayer(id)
  const player = myWorld.playerForId(id);
  client.emit('createPlayer', player);
  client.on('join', function(data) {
    client.emit('messages', 'Hello from server');
  });

  client.on('playerCreated', (data) => {
    console.log('player created')
  //so position player away from everyone
  if(players.length > 0) {
    let end = players[players.length - 1]
    data.x += end.x + 10
    data.y += end.y
    data.z += end.z
  }
  console.log('player is at', data)
  players.push(data)
    client.broadcast.emit('addOtherPlayer', data);
  })

  client.on('updatePosition', function(data){
    console.log('updating position')
    var newData = myWorld.updatePlayerData(data);
    client.broadcast.emit('updatePosition', newData);
  });


})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
