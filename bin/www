#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');


// console.log('this is the app after export', app)

var debug = require('debug')('arc2:server');
var http = require('http');
var world = require('../src/server/world')
var https = require('https')
const fs = require('fs');
var server = {};
var ExpressPeerServer = require('peer').ExpressPeerServer;

/**
 * Get port from environment and store in Express.
 */

  const options = {
      cert: fs.readFileSync('localhost.cert'),
      key: fs.readFileSync('localhost.key')
  };
  var port = normalizePort(process.env.PORT || '443');
  app.set('port', port);
  // var peerserver = ExpressPeerServer(server, {debug:true});
  
 
  
  server = https.createServer(options, app);
  var peerserver = ExpressPeerServer(server, {debug:true});
  app.use('/peerjs', peerserver)
  

  server.on('error', onError);
  server.on('listening', onListening);
 
  // app.use('/peerjs', function(req, res){
  //     console.log('we are in peer')
  // });
console.log('got this far')


/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);
var io = require('socket.io')(server);
var players = []

function Player (id) {
    this.id = id;
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.entity = null;
}


io.on('connection', function(socket) {
   console.log('there is a connection',socket)

    socket.on ('join', function (data) {
      //console.log(data)
            var idNum = players.length;
            var newPlayer = new Player (idNum);
            players.push (newPlayer);

            socket.emit ('playerData', {id: idNum, players: players});
            socket.emit ('test', {});
            socket.broadcast.emit ('otherPlayerJoined', newPlayer);
            console.log('initializing')
    });



    socket.on ('positionUpdate', function (data) {
      // console.log('got player movement data', data)
      players.map((item) => {
        if (item.id === data.id) {
            item.x = data.x
            item.y = data.y
            item.z = data.z
        }
    })
       console.log('this is the players array', players)
        socket.broadcast.emit ('updatePlayers', players);
    });



socket.on('audio-blod-send',function(data){
  console.log('trying to emit the data')
  socket.emit('audio', data);
  socket.emit ('test', {});
  //console.log(data)
});
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}